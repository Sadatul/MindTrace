version: '3.8'

services:
  reverse-proxy:
    image: traefik:v3.4
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.swarm=true"
      - "--providers.swarm.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=sadatulislamsadi@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    networks:
      - host_network
    deploy:
      placement:
        constraints:
          - node.role == manager

  db:
    image: postgres:17
    environment:
      - POSTGRES_USER=software
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - POSTGRES_DB=software
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    secrets:
      - db-password
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "software" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - host_network
    deploy:
      placement:
        constraints:
          - node.role == manager

  backend:
    image: ghcr.io/sadatul/mindtrace_backend:${VERSION}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-http.rule=Host(`mindtrace.pinklifeline.xyz`)"
      - "traefik.http.routers.backend-http.entrypoints=web"
      - "traefik.http.routers.backend-http.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
      - "traefik.http.routers.backend.rule=Host(`mindtrace.pinklifeline.xyz`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"

    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - REDIS_USER=default
      - REDIS_PORT=14237
    secrets:
      - db-url
      - db-username
      - db-password
      - redis-host
      - redis-password
      - email-password
      - azure-openai-endpoint
      - azure-openai-key
      - firebase-credential
      - qdrant-api-key
      - qdrant-host
      - bot-token

    networks:
      - host_network
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    networks:
      - host_network
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    deploy:
      placement:
        constraints: [node.role == manager]

  grafana:
    image: grafana/grafana-oss:latest
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - host_network
    deploy:
      placement:
        constraints: [node.role == manager]

  node-exporter:
    image: prom/node-exporter:latest
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - host_network
    deploy:
      mode: global  # One per Swarm node
      placement:
        constraints:
          - node.role == manager  # Or remove to run on all nodes

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    networks:
      - host_network
    deploy:
      placement:
        constraints:
          - node.role == manager

networks:
  host_network:

volumes:
  postgres-data:
  letsencrypt:
  grafana-data:
  prometheus_data:

configs:
  prometheus_config:
    external: true

secrets:
  db-url:
    external: true
  db-username:
    external: true
  db-password:
    external: true
  redis-host:
    external: true
  redis-password:
    external: true
  email-password:
    external: true
  azure-openai-endpoint:
    external: true
  azure-openai-key:
    external: true
  firebase-credential:
    external: true
  qdrant-api-key:
    external: true
  qdrant-host:
    external: true
  bot-token:
    external: true